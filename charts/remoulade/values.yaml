nameOverride: ""
fullnameOverride: ""

serviceAccount:
  ## specifies whether a service account should be created
  create: true
  ## annotations to add to the service account
  annotations: {}
  ## the name of the service account to use.
  ## if not set and create is true, a name is generated using the fullname template
  name: ""

workers:  # Define remoulade workers to deploy
  defaults:  # Below are defaults used by workers if given worker does not define it itself
    ## Define which image to use
    image:
      repository: setme
      tag: setme
      pullPolicy: IfNotPresent
      pullSecrets: []
    ## Replica count for the Deployment
    replicaCount: 1
    ## Set the resources for the Pod
    ## Note that if defined in a specific worker the whole block is overridden from the defaults
    resources:
      limits:
        cpu: "1"
        memory: 1500Mi
      requests:
        cpu: "0.1"
        memory: 64Mi
    ## Additional environment variables to define in the container
    extraEnvVars: {}
    ## Additional volumes to define in the Pod
    volumes: []
    ## Additional volume mounts to define in the main container
    volumeMounts: []
    ## Add extra labels to the Deployment
    labels: {}
    ## Add extra labels to the pods
    ## Can be a string to be interpolated or a dict
    podLabels:
    ## Extra annotations for pods
    podAnnotations: {}
    ## Affinity to set
    affinity: {}
    ## Tolerations to set
    tolerations: []
    ## Node selector to set
    nodeSelector: {}
    ## Priority Class Name
    ## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
    priorityClassName: ""
    ## Seconds pod needs to terminate gracefully
    ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
    terminationGracePeriodSeconds: 30
    ## Deployment strategy type
    ## Ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
    strategyType: RollingUpdate  # Can be Upgrade as well, see https://kubernetes.io/fr/docs/concepts/workloads/controllers/deployment/#strat%C3%A9gie
    ## Security Context for the Container
    ## Note that if defined in a specific worker the whole block is overridden from the defaults
    containerSecurityContext:
      enabled: true
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      runAsUser: 1000
    ## Security Context for the Pod
    ## Note that if defined in a specific worker the whole block is overridden from the defaults
    podSecurityContext:
      enabled: true
      fsGroup: 2000

  list:  # See examples in ci directory and definition in values.schema.json
    {}
    # my-first-worker:
    #   ###
    #   ## Optional values, if not defined, will use the "defaults" key
    #   ## Please refer to this key to know default values
    #   ###

    #   ## Define which image to use
    #   image:
    #     ## We deploy the "composition" example
    #     repository: ghcr.io/wiremind/remoulade
    #     tag: v0.46.2-example-composition
    #     pullPolicy: IfNotPresent
    #     pullSecrets: []
    #   ## Replica count for the Deployment
    #   replicaCount: 1
    #   ## Set the resources for the Pod
    #   ## Note that if defined in a specific worker the whole block is overridden from the defaults
    #   resources:
    #     requests:
    #       cpu: 100m
    #       memory: 64Mi
    #     limits:
    #       cpu: "2"
    #       memory: 256Mi
    #   ## Additional environment variables to define in the container
    #   extraEnvVars: {foo: a, bar: b}
    #   ## Additional volumes to define in the Pod
    #   volumes: []
    #   ## Additional volume mounts to define in the main container
    #   volumeMounts: []
    #   ## Add extra labels to the Deployment
    #   labels: {}
    #   ## Add extra labels to the pods
    #   podLabels: {foo: bar}
    #   ## Extra annotations for pods
    #   podAnnotations: {"foo": "bar"}
    #   ## Affinity to set
    #   affinity: {}
    #   ## Tolerations to set
    #   tolerations: []
    #   ## Node selector to set
    #   nodeSelector: {}
    #   ## Priority Class Name
    #   ## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
    #   priorityClassName: ""
    #   ## Seconds pod needs to terminate gracefully
    #   ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
    #   terminationGracePeriodSeconds: 90
    #   ## Strategy type
    #   strategyType: RollingUpdate
    #   ## Security Context for the Container
    #   ## Note that if defined in a specific worker the whole block is overridden from the defaults
    #   containerSecurityContext:
    #     enabled: true
    #     allowPrivilegeEscalation: false
    #     capabilities:
    #       drop:
    #       - ALL
    #     readOnlyRootFilesystem: true
    #     runAsNonRoot: true
    #     runAsUser: 1001
    #   ## Security Context for the Pod
    #   ## Note that if defined in a specific worker the whole block is overridden from the default
    #   podSecurityContext:
    #     enabled: true
    #     fsGroup: 2001

    #   ###
    #   ## Optional values, if not defined, will not be used at all or will be false (but there is no defaults)
    #   ###

    #   ## Optional command and args to run (if not using what is defined in Dockerfile)
    #   command: ["composition_worker"]
    #   args: []
    #   ## Define a port in the container and a Prometheus Operator PodMonitor
    #   metrics:
    #     enabled: true

    #   ## Horizontal Pod Autoscaler
    #   ## Refs:
    #   ## - https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
    #   ## - https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/
    #   autoscaling:
    #     enabled: true
    #     ## minReplicas SHOULD be >= 1 for now.
    #     minReplicas: 1
    #     maxReplicas: 1
    #     describedService: "some_service"
    #     metricName: "some_rabbitmq_queue_name"
    #     metricMatchLabels:
    #       queue: queue_name
    #     targetMetricValue: 42
    #   ## Optional extra Container(s) to define
    #   extraContainerList:
    #     - name: dummy-extra-container
    #       image: gcr.io/google_containers/pause-amd64:3.0

    # ## Another smaller example
    # my-second-worker:
    #   replicaCount: 1
    #   image:
    #     repository: ghcr.io/wiremind/remoulade
    #     tag: v0.46.2-example-composition
    #   command: ["composition_worker"]  # Yeah, I have a single example to show
    #   metrics:
    #     enabled: true

superbowl:
  enabled: false
  replicaCount: 1
  ## The backend to use. It MUST contain your app.
  ## Usually, will be the same image as your workers.
  backend:
    image:
      repository: setme
      tag: setme
      pullPolicy: IfNotPresent
    command: []
    args: []
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 2
        memory: 256Mi
    containerSecurityContext:
      allowPrivilegeEscalation: false
      enabled: true
      capabilities:
        drop:
        - ALL
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      runAsUser: 1000

  frontend:
    image:
      repository: ghcr.io/wiremind/super-bowl
      tag: v0.3.1
      pullPolicy: IfNotPresent
    resources:
      requests:
        cpu: 10m
        memory: 32Mi
      limits:
        cpu: 2
        memory: 64Mi
    containerSecurityContext:
      enabled: true
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      ## Default superbowl frontend image requires to write conf files
      readOnlyRootFilesystem: false
      runAsNonRoot: true
      runAsUser: 1001

  podSecurityContext:
    enabled: true
    fsGroup: 2000

  imagePullSecrets: []

  podAnnotations: {}

  service:
    type: ClusterIP
    port: 80

  ingress:
    enabled: false
    className: ""
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}

## PostgreSQL
## Ref: https://github.com/bitnami/charts/tree/master/bitnami/postgresql
postgresql:
  enabled: true
  auth:
    postgresPassword: setme
    database: remoulade
    username: remoulade
    password: setme

## Alternatively, give an already existing URL
## Example: externalPostgresqlUrl: postgresql://user:pass@my-postgresql:5432/my-database?sslmode=prefer
externalPostgresqlUrl:

## RabbitMQ
## Ref: https://github.com/bitnami/charts/tree/master/bitnami/rabbitmq
rabbitmq:
  enabled: true
  auth:
    username: rabbitmq
    password: setme
    erlangCookie: setme

## RabbitMQ Exporter
## Ref: https://github.com/prometheus-community/helm-charts/tree/main/charts/prometheus-rabbitmq-exporter
prometheus-rabbitmq-exporter:
  enabled: false

## Redis
## Ref: https://github.com/bitnami/charts/tree/master/bitnami/redis
redis:
  enabled: true
  auth:
    password: setme
  architecture: standalone
