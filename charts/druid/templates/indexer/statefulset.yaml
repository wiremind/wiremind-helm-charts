{{- if .Values.indexer.enabled }}

{{- range $categoryName, $categoryValue := .Values.indexer.categories }}

{{- if hasKey $categoryValue "enabled" | ternary $categoryValue.enabled true }}

{{- $indexerDefaults := $.Values.indexer.defaults }}

{{- $categoryService := hasKey $categoryValue "service" | ternary $categoryValue.service dict }}
{{- $categoryAutoscaling := hasKey $categoryValue "autoscaling" | ternary $categoryValue.autoscaling dict }}

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "druid.indexer.category.fullname" (dict "categoryName" $categoryName "context" $) }}
  labels:
    {{- include "druid.common-labels" $ | nindent 4 }}
    app.kubernetes.io/part-of: indexer
    app.kubernetes.io/component: indexer-{{ $categoryName }}
spec:
  {{- if not (hasKey $categoryAutoscaling "enabled" | ternary $categoryAutoscaling.enabled false) }}
  replicas: {{ if not (kindIs "invalid" $categoryValue.replicaCount) }}{{ $categoryValue.replicaCount }}{{ else }}{{ $indexerDefaults.replicaCount }}{{ end }}
  {{- end }}
  podManagementPolicy: {{ default $indexerDefaults.podManagementPolicy $categoryValue.podManagementPolicy }}
  serviceName: {{ include "druid.indexer.category.fullname" (dict "categoryName" $categoryName "context" $) }}
  updateStrategy: {{- toYaml $indexerDefaults.updateStrategy | nindent 4 }}
  selector:
    matchLabels:
      {{- include "druid.common-matchLabels" $ | nindent 6 }}
      app.kubernetes.io/part-of: indexer
      app.kubernetes.io/component: indexer-{{ $categoryName }}
  template:
    metadata:
      labels:
        {{- include "druid.common-labels" $ | nindent 8 }}
        app.kubernetes.io/part-of: indexer
        app.kubernetes.io/component: indexer-{{ $categoryName }}
      annotations:
        druid.k8s.enablePatching: "true"
        # This restarts all indexers for now as we use the same file
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") $ | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") $ | sha256sum }}
        checksum/configmap-indexers: {{ include (print $.Template.BasePath "/indexer/configmap.yaml") $ | sha256sum }}
        checksum/secret-indexers: {{ include (print $.Template.BasePath "/indexer/secret.yaml") $ | sha256sum }}
        {{- with $categoryValue.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      nodeSelector:
        {{- if $categoryValue.nodeSelector }}
        {{- toYaml $categoryValue.nodeSelector | nindent 8 }}
        {{- else }}
        {{- toYaml $indexerDefaults.nodeSelector | nindent 8 }}
        {{- end }}
      {{- with $indexerDefaults.affinity }}
      affinity: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $indexerDefaults.tolerations }}
      tolerations: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $indexerDefaults.podSecurityContext }}
      securityContext: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $indexerDefaults.priorityClassName }}
      priorityClassName: {{ . }}
      {{- end }}
      {{- if $indexerDefaults.serviceAccount.create }}
      serviceAccountName: {{ include "druid.indexer.serviceAccountName" $ }}
      {{- end }}
      containers:
        - name: indexer
          image: "{{ $.Values.image.repository }}:{{ $.Values.image.tag | default $.Chart.AppVersion }}"
          imagePullPolicy: {{ $.Values.image.pullPolicy | quote }}
          {{- if $indexerDefaults.containerSecurityContext.enabled }}
          securityContext: {{- omit $indexerDefaults.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          args: [ "middleManager" ]
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            {{- if hasKey $categoryService "resolveWithDNS" | ternary $categoryService.resolveWithDNS $.Values.service.resolveWithDNS }}
            - name: druid_host
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            {{- end }}
            - name: druid_extensions_loadList
              value: {{ $.Values.extensions.loadList | toJson | quote }}
          envFrom:
            - configMapRef:
                name: {{ include "druid.fullname" $ }}-config
            - configMapRef:
                name: {{ include "druid.indexer.category.fullname" (dict "categoryName" $categoryName "context" $) }}-config
            - secretRef:
                name: {{ include "druid.fullname" $ }}-config
            - secretRef:
                name: {{ include "druid.indexer.category.fullname" (dict "categoryName" $categoryName "context" $) }}-config
          ports:
            - containerPort: {{ $indexerDefaults.port }}
              name: http
            {{- if $.Values.metrics.enabled }}
            - name: http-metrics
              containerPort: {{ $.Values.metrics.service.port }}
              protocol: TCP
            {{- end }}
          {{- if $indexerDefaults.livenessProbe.enabled }}
          livenessProbe: {{- omit $indexerDefaults.livenessProbe "enabled" | toYaml | nindent 12 }}
            httpGet:
              path: /status/health
              port: http
          {{- end }}
          {{- if $indexerDefaults.readinessProbe.enabled }}
          readinessProbe: {{- omit $indexerDefaults.readinessProbe "enabled" | toYaml | nindent 12 }}
            httpGet:
              path: /status/selfDiscovered
              port: http
          {{- end }}
          resources:
            {{- if $categoryValue.resources }}
            {{- toYaml $categoryValue.resources | nindent 12 }}
            {{- else }}
            {{- toYaml $indexerDefaults.resources | nindent 12 }}
            {{- end }}
          volumeMounts:
            - mountPath: /opt/druid/var
              name: data
      {{- if not $categoryValue.persistence.enabled }}
      volumes:
        - name: data
          emptyDir:
            {{- with $categoryValue.emptyDir }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
      {{- end }}
  {{- if $categoryValue.persistence.enabled }}
  # alpha support in 1.23, beta & enabled by default in 1.27
  # See:
  #   - https://kubernetes.io/blog/2021/12/16/kubernetes-1-23-statefulset-pvc-auto-deletion/
  #   - https://kubernetes.io/blog/2023/05/04/kubernetes-1-27-statefulset-pvc-auto-deletion-beta/
  #   - https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#persistentvolumeclaim-retention
  persistentVolumeClaimRetentionPolicy:
    {{- with $categoryValue.persistence.persistentVolumeClaimRetentionPolicy }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  volumeClaimTemplates:
    - kind: PersistentVolumeClaim
      apiVersion: v1
      metadata:
        name: data
        namespace: {{ $.Release.Namespace }}
        labels:
          {{- include "druid.common-labels" $ | nindent 10 }}
          app.kubernetes.io/part-of: indexer
          app.kubernetes.io/component: indexer-{{ $categoryName }}
      spec:
        accessModes:
          - {{ $categoryValue.persistence.accessModes | quote }}
        resources:
          requests:
            storage: {{ $categoryValue.persistence.size }}
        storageClassName: {{ $categoryValue.persistence.storageClass }}
        volumeMode: Filesystem
  {{- end }}

{{- end }}

{{- end }}

{{- end }}
