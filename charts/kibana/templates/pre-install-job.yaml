{{- if .Values.createElasticsearchToken }}
apiVersion: batch/v1
kind: Job
metadata:
  name: pre-install-{{ template "kibana.fullname" . }}
  labels: {{ include "kibana.labels" . | nindent 4 }}
  annotations:
    {{- if .Values.install.annotations }}
    {{- range $key, $value := .Values.install.annotations }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
    {{- end }}
spec:
  backoffLimit: 20
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: create-kibana-token
          image: curlimages/curl:7.79.1
          imagePullPolicy: "{{ .Values.imagePullPolicy }}"
          command:
            - /bin/sh
          args:
            - -c
            - |
              set -e
              echo 'Creating a new Elasticsearch token for Kibana'
              ES_PATH='_security/service/elastic/kibana/credential/token/{{ template "kibana.fullname" . }}'
              ES_URL='{{ .Values.elasticsearchHosts }}/'"$ES_PATH"
              ES_AUTH="$ELASTICSEARCH_USERNAME:$ELASTICSEARCH_PASSWORD"
              ES_CA="$ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES"

              K8S_CA='/run/secrets/kubernetes.io/serviceaccount/ca.crt'
              K8S_URL="https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT_HTTPS"
              K8S_BEARER=$(cat /run/secrets/kubernetes.io/serviceaccount/token)
              echo 'Cleaning previous token'
              curl  -X DELETE -u "$ES_AUTH" --cacert "$ES_CA" "$ES_URL"
              echo 'Creating new token'
              RESPONSE=$(curl -X POST -u "$ES_AUTH" --cacert "$ES_CA" "$ES_URL")
              TOKEN=$(echo $RESPONSE | sed -n 's/.*"value":"\([^"]*\)".*/\1/p')
              BASE64_TOKEN=$(echo $TOKEN | base64 -w 0)
              K8S_SECRET='
              {
                "apiVersion": "v1",
                "kind": "Secret",
                "metadata": {
                  "namespace": "{{ .Release.Namespace }}",
                  "name": "{{ template "kibana.fullname" . }}-es-token"
                },
                "type": "Opaque",
                "data": {
                  "token": "'$BASE64_TOKEN'"
                }
              }'
              echo 'Creating K8S secret'
              curl --fail-with-body -X POST --cacert "$K8S_CA" -H "Authorization: Bearer $K8S_BEARER" -H 'Accept: application/json' -H 'Content-Type: application/json' "$K8S_URL/api/v1/namespaces/{{ .Release.Namespace }}/secrets" -d "$K8S_SECRET"
          env:
            - name: "ELASTICSEARCH_USERNAME"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.elasticsearchCredentialSecret }}
                  key: username
            - name: "ELASTICSEARCH_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.elasticsearchCredentialSecret }}
                  key: password
            - name: ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES
              value: /certs/{{ .Values.elasticsearchCertificateAuthoritiesFile }}"
          volumeMounts:
            {{- if .Values.elasticsearchCertificateSecret }}
            - name: elasticsearch-certs
              mountPath: /certs
              readOnly: true
            {{- end }}
      serviceAccount: pre-install-{{ template "kibana.fullname" . }}
      volumes:
        {{- if .Values.elasticsearchCertificateSecret }}
        - name: elasticsearch-certs
          secret:
            secretName: {{ .Values.elasticsearchCertificateSecret }}
        {{- end }}
{{- end }}
