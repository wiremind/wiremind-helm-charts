{{- if .Values.indexer.enabled }}

{{- range $categoryName, $categoryValue := .Values.indexer.categories }}

{{- if hasKey $categoryValue "enabled" | ternary $categoryValue.enabled true }}

{{- if eq $categoryValue.mode "StatefulSet" }}

{{- $indexerDefaults := $.Values.indexer.defaults }}

{{- $categoryService := hasKey $categoryValue "service" | ternary $categoryValue.service dict }}

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "druid.indexer.category.fullname" (dict "categoryName" $categoryName "context" $) }}
  labels:
{{ include "druid.common-labels" $ | indent 4 }}
    app.kubernetes.io/part-of: indexer
    app.kubernetes.io/component: indexer-{{ $categoryName }}
spec:
  serviceName: {{ include "druid.indexer.category.fullname" (dict "categoryName" $categoryName "context" $) }}
  podManagementPolicy: {{ default $indexerDefaults.podManagementPolicy $categoryValue.podManagementPolicy }}
  replicas: {{ if not (kindIs "invalid" $categoryValue.replicaCount) }}{{ $categoryValue.replicaCount }}{{ else }}{{ $indexerDefaults.replicaCount }}{{ end }}
  selector:
    matchLabels:
{{ include "druid.common-matchLabels" $ | indent 6 }}
      app.kubernetes.io/part-of: indexer
      app.kubernetes.io/component: indexer-{{ $categoryName }}
  template:
    metadata:
      labels:
{{ include "druid.common-labels" $ | indent 8 }}
        app.kubernetes.io/part-of: indexer
        app.kubernetes.io/component: indexer-{{ $categoryName }}
      annotations:
        druid.k8s.enablePatching: "true"
        # This restarts all indexers for now as we use the same file
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") $ | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") $ | sha256sum }}
        checksum/configmap-indexers: {{ include (print $.Template.BasePath "/indexer/configmap.yaml") $ | sha256sum }}
        checksum/secret-indexers: {{ include (print $.Template.BasePath "/indexer/secret.yaml") $ | sha256sum }}
{{- with $categoryValue.podAnnotations }}
{{ toYaml . | indent 8 }}
{{- end }}
    spec:
      nodeSelector:
{{- if $categoryValue.nodeSelector }}
{{ toYaml $categoryValue.nodeSelector | indent 8 }}
{{- else }}
{{ toYaml $indexerDefaults.nodeSelector | indent 8 }}
{{- end }}
    {{- with $indexerDefaults.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with $indexerDefaults.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      {{- if $indexerDefaults.priorityClassName }}
      priorityClassName: {{ $indexerDefaults.priorityClassName }}
      {{- end }}
      {{- if $indexerDefaults.serviceAccount.create }}
      serviceAccountName: {{ include "druid.indexer.serviceAccountName" $ }}
      {{- end }}
      containers:
        - name: indexer
          args: [ "middleManager" ]
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            {{- if hasKey $categoryService "overrideDruidHost" | ternary $categoryService.overrideDruidHost $.Values.service.overrideDruidHost }}
            {{- if hasKey $categoryService "dedicated" | ternary $categoryService.dedicated $.Values.service.dedicated }}
            - name: druid_host
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            {{- else }}
            - name: druid_host
              value: {{ include "druid.indexer.category.fullname" (dict "categoryName" $categoryName "context" $) }}
            {{- end }}
            {{- end }}
            - name: druid_extensions_loadList
              value: {{ $.Values.extensions.loadList | toJson | quote }}
          envFrom:
            - configMapRef:
                name: {{ include "druid.fullname" $ }}-config
            - configMapRef:
                name: {{ include "druid.indexer.category.fullname" (dict "categoryName" $categoryName "context" $) }}-config
            - secretRef:
                name: {{ include "druid.fullname" $ }}-config
            - secretRef:
                name: {{ include "druid.indexer.category.fullname" (dict "categoryName" $categoryName "context" $) }}-config
          resources:
{{- if $categoryValue.resources }}
{{ toYaml $categoryValue.resources | indent 12 }}
{{- else }}
{{ toYaml $indexerDefaults.resources | indent 12 }}
{{- end }}
          {{- if $indexerDefaults.livenessProbe.enabled }}
          livenessProbe: {{- omit $indexerDefaults.livenessProbe "enabled" | toYaml | nindent 12 }}
            httpGet:
              path: /status/health
              port: http
          {{- end }}
          {{- if $indexerDefaults.readinessProbe.enabled }}
          readinessProbe: {{- omit $indexerDefaults.readinessProbe "enabled" | toYaml | nindent 12 }}
            httpGet:
              path: /status/selfDiscovered
              port: http
          {{- end }}
          image: "{{ $.Values.image.repository }}:{{ $.Values.image.tag | default $.Chart.AppVersion }}"
          imagePullPolicy: {{ $.Values.image.pullPolicy | quote }}
          ports:
            - containerPort: {{ $indexerDefaults.port }}
              name: http
            {{- if $.Values.metrics.enabled }}
            - name: http-metrics
              containerPort: {{ $.Values.metrics.service.port }}
              protocol: TCP
            {{- end }}
          volumeMounts:
            - mountPath: /opt/druid/var
              name: data
      volumes:
      - name: data
        emptyDir:
          # medium: Memory
          sizeLimit: "{{ $categoryValue.emptyDir.size }}"
      securityContext:
          fsGroup: 1000
{{- if $categoryValue.updateStrategy }}
  updateStrategy:
    type: {{ $categoryValue.updateStrategy.type }}
{{- end }}

{{- end }}

{{- end }}

{{- end }}

{{- end }}
