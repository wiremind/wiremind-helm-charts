{{- if .Values.createElasticsearchToken }}
apiVersion: batch/v1
kind: Job
metadata:
  name: pre-install-{{ template "kibana.fullname" . }}
  labels: {{ include "kibana.labels" . | nindent 4 }}
  annotations:
    {{ .Values.install.annotations | toYaml | nindent 4 }}
spec:
  backoffLimit: 0
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: create-kibana-token
          image: alpine:3.20.3
          imagePullPolicy: "{{ .Values.imagePullPolicy }}"
          command:
            - /bin/sh
          args:
            - -c
            - |
              apk add jq curl
              K8S_CA="/run/secrets/kubernetes.io/serviceaccount/ca.crt"
              K8S_URL="https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT_HTTPS}"
              K8S_BEARER=$(cat /run/secrets/kubernetes.io/serviceaccount/token)
              K8S_SECRET_NAMESPACE="{{ .Release.Namespace }}"
              K8S_SECRET_NAME="{{ template "kibana.fullname" . }}-es-token"

              ES_AUTH="${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}"
              ES_CA="$ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES"
              ES_URL_HEALTH="{{ .Values.elasticsearchHosts }}/_cluster/health?wait_for_status=yellow&timeout=10s"
              ES_URL="{{ .Values.elasticsearchHosts }}/_security/service/elastic/kibana/credential/token/{{ template "kibana.fullname" . }}"

              echo "Checking for Secret existence...";
              secrets_response=$(curl -k --max-time 5 --silent --show-error \
                --cacert "${K8S_CA}" \
                -H "Authorization: Bearer ${K8S_BEARER}" \
                -H "Accept: application/json" \
                -H "Content-Type: application/json" \
                "${K8S_URL}/api/v1/namespaces/${K8S_SECRET_NAMESPACE}/secrets")

              # Check if the specific secret is in the list
              if echo "$secrets_response" | jq -e ".items[] | select(.metadata.name == \"$K8S_SECRET_NAME\")" > /dev/null;
              then
                  echo "Secret ${K8S_SECRET_NAME} already exists in namespace ${K8S_SECRET_NAMESPACE}, exiting."
                  exit 0
              fi;

              while true;
              do
                echo "Waiting for elasticsearch..."

                HTTP_CODE=""
                RESPONSE_HEALTH_CMD="curl -k --max-time 5 --silent --show-error -u $ES_AUTH $ES_URL_HEALTH"
                if [[ "$ES_CA" != "" ]]; then
                  RESPONSE_HEALTH_CMD="${RESPONSE_HEALTH_CMD} --cacert ${ES_CA}"
                fi
                RESPONSE_HEALTH=$($RESPONSE_HEALTH_CMD)
                if [[ "$?" == "0" ]]; then
                  HTTP_CODE_CMD="curl -k --max-time 5 -s -o /dev/null -w "%{http_code}" -u $ES_AUTH $ES_URL_HEALTH"
                  if [[ "$ES_CA" != "" ]]; then
                    HTTP_CODE_CMD="${HTTP_CODE_CMD} --cacert ${ES_CA}"
                  fi
                  HTTP_CODE=$($HTTP_CODE_CMD)
                  CLUSTER_READY=$(echo \'$RESPONSE_HEALTH\' | grep -q '"status":"yellow"')
                  if [[ "$?" != "0" ]]; then
                    CLUSTER_READY=$(echo \'$RESPONSE_HEALTH\' | grep -q '"status":"green"')
                  fi
                fi
                # Status is yellow or green and http code is 200
                if [[ "$?" == "0" && "$HTTP_CODE" == "200" ]]; then
                  echo $RESPONSE_HEALTH
                  break
                else
                  echo $RESPONSE_HEALTH
                  sleep 10;
                fi
              done;

              echo "Cluster is ready"

              echo "Deleting previous Elasticsearch token for Kibana"
              DELETE_TOKEN_CMD="curl -k --max-time 5 --silent --show-error -X DELETE -u $ES_AUTH $ES_URL"
              if [[ "$ES_CA" != "" ]]; then
                DELETE_TOKEN_CMD="${DELETE_TOKEN_CMD} --cacert ${ES_CA}"
              fi
              DELETE_TOKEN=$($DELETE_TOKEN_CMD)
              echo $DELETE_TOKEN;

              echo "Creating new Elasticsearch token for Kibana"
              CREATE_TOKEN_CMD="curl -k --max-time 5 --silent --show-error -X POST -u $ES_AUTH $ES_URL"
              if [[ "$ES_CA" != "" ]]; then
                CREATE_TOKEN_CMD="${CREATE_TOKEN_CMD} --cacert ${ES_CA}"
              fi
              CREATE_TOKEN=$($CREATE_TOKEN_CMD)

              echo "Creating K8S secret"
              TOKEN=$(echo $CREATE_TOKEN | sed -n 's/.*"value":"\([^"]*\)".*/\1/p');
              BASE64_TOKEN=$(echo $TOKEN | base64 -w 0);
              K8S_SECRET=$(cat <<EOF
              {
                "apiVersion": "v1",
                "kind": "Secret",
                "metadata": {
                  "namespace": "${K8S_SECRET_NAMESPACE}",
                  "name": "${K8S_SECRET_NAME}"
                },
                "type": "Opaque",
                "data": {
                  "token": "${BASE64_TOKEN}"
                }
              }
              EOF
              )
              secrets_response=$(curl -k --max-time 5 --silent --show-error \
                -X POST \
                --cacert "$K8S_CA" \
                -H "Authorization: Bearer $K8S_BEARER" \
                -H "Accept: application/json" \
                -H "Content-Type: application/json" \
                "$K8S_URL/api/v1/namespaces/$K8S_SECRET_NAMESPACE/secrets" \
                -d "$K8S_SECRET")
          env:
            - name: "ELASTICSEARCH_USERNAME"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.elasticsearchCredentialSecret }}
                  key: username
            - name: "ELASTICSEARCH_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.elasticsearchCredentialSecret }}
                  key: password
            - name: ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES
              value: "/certs/{{ .Values.elasticsearchCertificateAuthoritiesFile }}"
          volumeMounts:
            {{- if .Values.elasticsearchCertificateSecret }}
            - name: elasticsearch-certs
              mountPath: /certs
              readOnly: true
            {{- end }}
          {{- if .Values.preInstallJobResources }}
          resources:
            {{- toYaml .Values.preInstallJobResources | nindent 12 }}
          {{- end }}
      serviceAccount: pre-install-{{ template "kibana.fullname" . }}
      volumes:
        {{- if .Values.elasticsearchCertificateSecret }}
        - name: elasticsearch-certs
          secret:
            secretName: {{ .Values.elasticsearchCertificateSecret }}
        {{- end }}
{{- end }}
