{{- if .Values.historical.enabled }}

{{- range $tierName, $tierValue := .Values.historical.tiers }}

{{- if hasKey $tierValue "enabled" | ternary $tierValue.enabled true }}

{{- $historicalDefaults := $.Values.historical.defaults }}

{{- $tierService := hasKey $tierValue "service" | ternary $tierValue.service dict }}
{{- $tierAutoscaling := hasKey $tierValue "autoscaling" | ternary $tierValue.autoscaling dict }}

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "druid.historical.tier.fullname" (dict "tierName" $tierName "context" $) }}
  labels:
    {{- include "druid.common-labels" $ | nindent 4 }}
    app.kubernetes.io/part-of: historical
    app.kubernetes.io/component: historical-{{ $tierName }}
spec:
  {{- if not (hasKey $tierAutoscaling "enabled" | ternary $tierAutoscaling.enabled $historicalDefaults.autoscaling.enabled) }}
  replicas: {{ if not (kindIs "invalid" $tierValue.replicaCount) }}{{ $tierValue.replicaCount }}{{ else }}{{ $historicalDefaults.replicaCount }}{{ end }}
  {{- end }}
  podManagementPolicy: {{ default $historicalDefaults.podManagementPolicy $tierValue.podManagementPolicy }}
  serviceName: {{ include "druid.historical.tier.fullname" (dict "tierName" $tierName "context" $) }}
  updateStrategy: {{- toYaml $historicalDefaults.updateStrategy | nindent 4 }}
  selector:
    matchLabels:
      {{- include "druid.common-matchLabels" $ | nindent 6 }}
      app.kubernetes.io/part-of: historical
      app.kubernetes.io/component: historical-{{ $tierName }}
  template:
    metadata:
      labels:
        {{- include "druid.common-labels" $ | nindent 8 }}
        app.kubernetes.io/part-of: historical
        app.kubernetes.io/component: historical-{{ $tierName }}
      annotations:
        druid.k8s.enablePatching: "true"
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") $ | sha256sum }}
        checksum/configmap-historicals: {{ include (print $.Template.BasePath "/historical/configmap.yaml") $ | sha256sum }}
        checksum/configmap-historicals-individual: {{ include "druid.historical.config.individual.content" (dict "tierName" $tierName "tierValue" $tierValue "context" $) | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") $ | sha256sum }}
        checksum/secret-historicals: {{ include (print $.Template.BasePath "/historical/secret.yaml") $ | sha256sum }}
        checksum/secret-historicals-individual: {{ include "druid.historical.secret.individual.content" (dict "tierValue" $tierValue) | sha256sum }}
        {{- with $historicalDefaults.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      nodeSelector:
        {{- if $tierValue.nodeSelector }}
        {{- toYaml $tierValue.nodeSelector | nindent 8 }}
        {{- else }}
        {{- toYaml $historicalDefaults.nodeSelector | nindent 8 }}
        {{- end }}
      {{- with $historicalDefaults.affinity }}
      affinity: {{ tpl (toYaml .) (dict "tierName" $tierName) | nindent 8 }}
      {{- end }}
      {{- with $historicalDefaults.tolerations }}
      tolerations: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $historicalDefaults.podSecurityContext }}
      securityContext: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $historicalDefaults.priorityClassName }}
      priorityClassName: {{ . }}
      {{- end }}
      {{- if $historicalDefaults.serviceAccount.create }}
      serviceAccountName: {{ include "druid.historical.serviceAccountName" $ }}
      {{- end }}
      containers:
        - name: historical
          image: "{{ $.Values.image.repository }}:{{ $.Values.image.tag | default $.Chart.AppVersion }}"
          imagePullPolicy: {{ $.Values.image.pullPolicy | quote }}
          {{- if $historicalDefaults.containerSecurityContext.enabled }}
          securityContext: {{- omit $historicalDefaults.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          args: [ "historical" ]
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            {{- if hasKey $tierService "resolveWithDNS" | ternary $tierService.resolveWithDNS $.Values.service.resolveWithDNS }}
            - name: druid_host
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            {{- end }}
            - name: druid_extensions_loadList
              value: {{ $.Values.extensions.loadList | toJson | quote }}
          # Order defines precedence
          envFrom:
            - configMapRef:
                name: {{ include "druid.fullname" $ }}-config
            - secretRef:
                name: {{ include "druid.fullname" $ }}-config
            - configMapRef:
                name: {{ include "druid.fullname" $ }}-historical-config
            - secretRef:
                name: {{ include "druid.fullname" $ }}-historical-config
            - configMapRef:
                name: {{ include "druid.historical.tier.fullname" (dict "tierName" $tierName "context" $) }}-config
            - secretRef:
                name: {{ include "druid.historical.tier.fullname" (dict "tierName" $tierName "context" $) }}-config
          ports:
            - containerPort: {{ $historicalDefaults.port }}
              name: http
            {{- if $.Values.metrics.enabled }}
            - name: http-metrics
              containerPort: {{ $.Values.metrics.service.port }}
              protocol: TCP
            {{- end }}
          {{- if $historicalDefaults.startupProbe.enabled }}
          startupProbe: {{- omit $historicalDefaults.startupProbe "enabled" | toYaml | nindent 12 }}
            httpGet:
              path: /status/health
              port: http
          {{- end }}
          {{- if $historicalDefaults.livenessProbe.enabled }}
          livenessProbe: {{- omit $historicalDefaults.livenessProbe "enabled" | toYaml | nindent 12 }}
            httpGet:
              path: /status/health
              port: http
          {{- end }}
          {{- if $historicalDefaults.readinessProbe.enabled }}
          readinessProbe: {{- omit $historicalDefaults.readinessProbe "enabled" | toYaml | nindent 12 }}
            httpGet:
              path: /druid/historical/v1/readiness
              port: http
          {{- end }}
          resources:
            {{- if $tierValue.resources }}
            {{- toYaml $tierValue.resources | nindent 12 }}
            {{- else }}
            {{- toYaml $historicalDefaults.resources | nindent 12 }}
            {{- end }}
          volumeMounts:
            - mountPath: /opt/druid/var
              name: data
      {{- if not $historicalDefaults.persistence.enabled }}
      volumes:
      - name: data
        emptyDir: {}
      {{- end }}
  {{- if $historicalDefaults.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        {{- with $historicalDefaults.persistence.storageClass }}
        storageClassName: {{ . }}
        {{- end }}
        resources:
          requests:
            storage: "{{ $tierValue.persistence.size }}"
  {{- end }}

{{- end }}

{{- end }}

{{- end }}
