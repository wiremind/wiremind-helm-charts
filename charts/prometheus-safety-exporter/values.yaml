# Default values for prometheus-safety-exporter.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: setme
  tag: setme
  pullPolicy: IfNotPresent

# Extra environment variables inserted in a new secret
extraEnv:
  # SAFETY_API_KEY: xxx

delayBetweenChecks: 604800

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

safety:
  securityContext: {}
  resources:
    requests:
      cpu: 1m
      memory: 100Mi
    limits:
      cpu: 2
      memory: 300Mi

jsonExporter:
  image:
    repository: quay.io/prometheuscommunity/json-exporter
    tag: ""
    pullPolicy: IfNotPresent
  ## Labels to add to the metric
  metricsLabels: |
    package_name: '{ .package_name }'
    analyzed_version: '{ .analyzed_version }'
    vulnerability_id: '{ .vulnerability_id }'
  securityContext:
    capabilities:
      drop:
        - ALL
    runAsUser: 1000
    runAsNonRoot: true
    readOnlyRootFilesystem: true
  resources:
    requests:
      cpu: 1m
      memory: 15Mi
    limits:
      cpu: 2
      memory: 64Mi
  startupProbe:
    httpGet:
      path: /
      port: http
    failureThreshold: 50
  livenessProbe:
    timeoutSeconds: 3
    periodSeconds: 300
    httpGet:
      path: /
      port: http
    failureThreshold: 5
  readinessProbe:
    timeoutSeconds: 3
    periodSeconds: 120
    failureThreshold: 2
    httpGet:
      path: /
      port: http

## Custom PrometheusRules to be defined
## The value is evaluated as a template, so, for example, the value can depend on .Release or .Chart
## ref: https://github.com/coreos/prometheus-operator#customresourcedefinitions
prometheusRule:
  enabled: false
  additionalLabels: {}
  namespace: ""
  rules: []
    ## These are just examples rules, please adapt them to your needs.
    ## Make sure to constraint the rules to the current service.
    #  - alert: NoSafetyVulnerabilitieFoundExist
    #    expr: safety_vulnerabilities_found{job="{{ .Release.Namespace}}"/{{ include "prometheus-memcached-exporter.fullname" . }}"} == 0
    #    for: 3h
    #    labels:
    #      severity: error
    #    annotations:
    #      summary: Safety has not returned any recent value for {{ "{{ $labels.instance }}" }}
    #      description: Safety has not returned any recent value for {{ "{{ $labels.instance }}" }}

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
