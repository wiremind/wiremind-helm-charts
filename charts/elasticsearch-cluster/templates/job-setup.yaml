{{- if .Values.setup.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "elasticsearch-cluster.fullname" . }}-setup
  labels:
{{ include "elasticsearch-cluster.labels" . | indent 4 }}
  {{- with .Values.setup.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  backoffLimit: 0
  ttlSecondsAfterFinished: {{ .Values.setup.ttlSecondsAfterFinished }}
  template:
    metadata:
      labels:
{{ include "elasticsearch-cluster.labels" . | indent 8 }}
    spec:
      {{- with .Values.setup.priorityClassName }}
      priorityClassName: {{ . }}
      {{- end }}
      restartPolicy: Never
      containers:
        - name: setup
          image: curlimages/curl:8.11.0
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: setup
              mountPath: /app/config
            {{- if .Values.setup.elasticsearchCertificateSecret }}
            - name: elasticsearch-certs
              mountPath: /certs
              readOnly: true
            {{- end }}
          env:
            - name: "ELASTICSEARCH_USERNAME"
              valueFrom:
                secretKeyRef:
                  name: {{ include "elasticsearch-cluster.elasticsearch-credentials" . }}
                  key: username
            - name: "ELASTICSEARCH_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: {{ include "elasticsearch-cluster.elasticsearch-credentials" . }}
                  key: password
            {{- if .Values.setup.elasticsearchCertificateSecret }}
            - name: ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES
              value: "/certs/{{ .Values.setup.elasticsearchCertificateAuthoritiesFile }}"
            {{- end }}
          command:
            - /bin/sh
          args:
            - -c
            - |
              echo "Configuring Elasticsearch..."
              FILES="/app/config/*-query.json"
              ES_CA="$ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES"
              for filequeryjson in $FILES
              do
                echo "Processing $filequeryjson file..."
                export QUERY=`cat $filequeryjson`
                FILENAME=`basename $filequeryjson`
                CONFIG_FILENAME="${FILENAME/-query/}"
                CONFIG_FILENAME="${CONFIG_FILENAME%.*}"
                CONFIG_ENV_PATH="/app/config/$CONFIG_FILENAME-config.env"
                ES_AUTH="$ELASTICSEARCH_USERNAME:$ELASTICSEARCH_PASSWORD"

                source $CONFIG_ENV_PATH

                ES_URL_HEALTH="${ELASTICSEARCH_HOST}/_cluster/health?wait_for_status=yellow&timeout=10s"

                if [[ "$DEBUG" == "true" ]]; then
                  set -x
                fi

                if [[ "$DEBUG" == "true" ]]; then
                  cat "$filequeryjson"
                  cat $CONFIG_ENV_PATH
                fi

                while true;
                do
                  echo "Waiting for elasticsearch..."

                  HTTP_CODE=""
                  RESPONSE_HEALTH_CMD="curl -k --max-time 5 --silent --show-error -u $ES_AUTH $ES_URL_HEALTH"
                  if [[ "$ES_CA" != "" ]]; then
                    RESPONSE_HEALTH_CMD="${RESPONSE_HEALTH_CMD} --cacert ${ES_CA}"
                  fi
                  RESPONSE_HEALTH=$($RESPONSE_HEALTH_CMD)
                  if [[ "$?" == "0" ]]; then
                    HTTP_CODE_CMD="curl -k --max-time 5 -s -o /dev/null -w "%{http_code}" -u $ES_AUTH $ES_URL_HEALTH"
                    if [[ "$ES_CA" != "" ]]; then
                      HTTP_CODE_CMD="${HTTP_CODE_CMD} --cacert ${ES_CA}"
                    fi
                    HTTP_CODE=$($HTTP_CODE_CMD)
                    CLUSTER_READY=$(echo \'$RESPONSE_HEALTH\' | grep -q '"status":"yellow"')
                    if [[ "$?" != "0" ]]; then
                      CLUSTER_READY=$(echo \'$RESPONSE_HEALTH\' | grep -q '"status":"green"')
                    fi
                  fi
                  # Status is yellow or green and http code is 200
                  if [[ "$?" == "0" && "$HTTP_CODE" == "200" ]]; then
                    echo $RESPONSE_HEALTH
                    break
                  else
                    echo $RESPONSE_HEALTH
                    sleep 10
                  fi
                done;

                echo "Cluster is ready"

                HEADERS_CMD=""
                echo "$HEADERS" | tr ";" '\n' | \
                {
                  CURL_CMD="curl -k --max-time 5 --silent --show-error -X ${METHOD} -u ${ES_AUTH}"

                  if [[ "$ES_CA" != "" ]]; then
                    CURL_CMD="${CURL_CMD} --cacert ${ES_CA}"
                  fi

                  while read header;
                  do
                    if [ ! -z "$header" ]; then
                      CURL_CMD="${CURL_CMD} -H \"${header}\""
                    fi
                  done

                  CURL_CMD="${CURL_CMD} \"${ELASTICSEARCH_HOST}/${ENDPOINT}\""

                  if [ ! -z '$QUERY' ]; then
                    CURL_CMD="${CURL_CMD} --data-binary \"@${filequeryjson}\""
                  fi

                  echo "Sending request"

                  RESPONSE=$(eval $CURL_CMD)

                  # Elasticsearch will answer at least {"acknowledged":true}, at most {"acknowledged":true, ...}, except on security api
                  if echo "$RESPONSE" | grep -v '"acknowledged":true' && [ "${ENDPOINT:0:9}" != _security ]; then
                    exit 1
                  else
                    echo $RESPONSE
                  fi
                }
              done
      terminationGracePeriodSeconds: {{ .Values.setup.terminationGracePeriodSeconds }}
      volumes:
        - name: setup
          configMap:
            # Provide the name of the ConfigMap containing the files you want
            # to add to the container
            name: {{ include "elasticsearch-cluster.fullname" . }}-setup
        {{- if .Values.setup.elasticsearchCertificateSecret }}
        - name: elasticsearch-certs
          secret:
            secretName: {{ .Values.setup.elasticsearchCertificateSecret }}
        {{- end }}
{{- end }}
