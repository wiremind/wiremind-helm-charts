{{- if .Values.createElasticsearchToken }}
apiVersion: batch/v1
kind: Job
metadata:
  name: pre-delete-{{ template "kibana.fullname" . }}
  labels: {{ include "kibana.labels" . | nindent 4 }}
  annotations:
    {{- if .Values.delete.annotations }}
    {{- range $key, $value := .Values.delete.annotations }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
    {{- end }}
spec:
  backoffLimit: 3
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: clean-kibana-token
          image: "{{ .Values.image }}:{{ .Values.imageTag }}"
          imagePullPolicy: "{{ .Values.imagePullPolicy }}"
          command:
            - /bin/sh
          args:
            - -c
            - |
              set -e
              echo 'Cleaning the Kibana Elasticsearch token'
              ES_PATH='_security/service/elastic/kibana/credential/token/{{ template "kibana.fullname" . }}'
              ES_URL='{{ .Values.elasticsearchHosts }}/'"$ES_PATH"
              ES_AUTH="$ELASTICSEARCH_USERNAME:$ELASTICSEARCH_PASSWORD"
              ES_CA="$ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES"
              K8S_CA='/run/secrets/kubernetes.io/serviceaccount/ca.crt'
              K8S_URL="https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT_HTTPS"
              K8S_BEARER=$(cat /run/secrets/kubernetes.io/serviceaccount/token)
              echo 'Cleaning token'
              curl -X DELETE -u "$ES_AUTH" --cacert "$ES_CA" "$ES_URL"
              echo 'Delete K8S secret'
              curl -X DELETE --cacert "$K8S_CA" -H "Authorization: Bearer $K8S_BEARER" -H 'Accept: application/json' -H 'Content-Type: application/json' "$K8S_URL/api/v1/namespaces/{{ .Release.Namespace }}/secrets/{{ template "kibana.fullname" . }}-es-token"
          env:
            - name: "ELASTICSEARCH_USERNAME"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.elasticsearchCredentialSecret }}
                  key: username
            - name: "ELASTICSEARCH_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.elasticsearchCredentialSecret }}
                  key: password
            - name: ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES
              value: /certs/{{ .Values.elasticsearchCertificateAuthoritiesFile }}"
          volumeMounts:
            {{- if .Values.elasticsearchCertificateSecret }}
            - name: elasticsearch-certs
              mountPath: /certs
              readOnly: true
            {{- end }}
      serviceAccount: pre-delete-{{ template "kibana.fullname" . }}
      volumes:
        {{- if .Values.elasticsearchCertificateSecret }}
        - name: elasticsearch-certs
          secret:
            secretName: {{ .Values.elasticsearchCertificateSecret }}
            optional: true
        {{- end }}
{{- end }}