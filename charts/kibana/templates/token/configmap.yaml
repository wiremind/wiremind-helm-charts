apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "kibana.fullname" . }}-token
  labels: {{ include "kibana.labels" . | nindent 4 }}
  {{- if .Values.annotations }}
  annotations:
    {{ .Values.annotations | toYaml | nindent 4 }}
  {{- end }}
data:
  token.sh: |
    #!/bin/sh

    K8S_CA="/run/secrets/kubernetes.io/serviceaccount/ca.crt"
    K8S_URL="https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT_HTTPS}"
    K8S_BEARER=$(cat /run/secrets/kubernetes.io/serviceaccount/token)
    K8S_NAMESPACE="{{ .Release.Namespace }}"
    K8S_SECRET_NAME="{{ template "kibana.es-token" . }}"
    K8S_DEPLOYMENT_NAME="{{ template "kibana.fullname" . }}"

    ES_AUTH="${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}"
    ES_CA="$ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES"
    ES_URL_HEALTH="{{ .Values.elasticsearchHosts }}/_cluster/health?wait_for_status=yellow&timeout=10s"
    ES_URL="{{ .Values.elasticsearchHosts }}/_security/service/elastic/kibana/credential/token/{{ template "kibana.fullname" . }}"

    echo "Retrieving elasticsearch token for kibana"

    secret_response=$(curl -k --max-time 5 --silent --show-error \
        -X GET \
        --cacert "$K8S_CA" \
        -H "Authorization: Bearer $K8S_BEARER" \
        -H "Accept: application/json" \
        -H "Content-Type: application/json" \
        "$K8S_URL/api/v1/namespaces/$K8S_NAMESPACE/secrets/$K8S_SECRET_NAME" \
    )

    token_base64=$(echo "$secret_response" | sed -n 's/.*"token": "\([^"]*\)".*/\1/p')

    token=""
    # Check if the token field is non-empty
    if [[ -n "$token_base64" ]]; then
        token=$(echo "$token_base64" | base64 -d 2>/dev/null)
    fi

    while true;
    do
        echo "Waiting for elasticsearch..."

        HTTP_CODE=""
        RESPONSE_HEALTH_CMD="curl -k --max-time 5 --silent --show-error -u $ES_AUTH $ES_URL_HEALTH"
        if [[ "$ES_CA" != "" ]]; then
            RESPONSE_HEALTH_CMD="${RESPONSE_HEALTH_CMD} --cacert ${ES_CA}"
        fi
        RESPONSE_HEALTH=$($RESPONSE_HEALTH_CMD)
        if [[ "$?" == "0" ]]; then
            HTTP_CODE_CMD="curl -k --max-time 5 -s -o /dev/null -w "%{http_code}" -u $ES_AUTH $ES_URL_HEALTH"
            if [[ "$ES_CA" != "" ]]; then
                HTTP_CODE_CMD="${HTTP_CODE_CMD} --cacert ${ES_CA}"
            fi
            HTTP_CODE=$($HTTP_CODE_CMD)
            CLUSTER_READY=$(echo \'$RESPONSE_HEALTH\' | grep -q '"status":"yellow"')
            if [[ "$?" != "0" ]]; then
                CLUSTER_READY=$(echo \'$RESPONSE_HEALTH\' | grep -q '"status":"green"')
            fi
        fi
        # Status is yellow or green and http code is 200
        if [[ "$?" == "0" && "$HTTP_CODE" == "200" ]]; then
            echo $RESPONSE_HEALTH
            break
        else
            echo $RESPONSE_HEALTH
            sleep 10;
        fi
    done;

    echo "Cluster is ready to accept requests"

    if [[ -n "$token" ]]; then
        echo "Token value in secret ${K8S_SECRET_NAME} is already set, checking its validity."

        token_validity_response=$(curl -k --max-time 5 --silent --show-error \
            -X GET \
            -H "Authorization: Bearer $token" \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            "$ES_URL_HEALTH" \
        )

        echo $token_validity_response

        if echo "$token_validity_response" | grep -q '"status":401'; then
            echo "Token is invalid, recreating a new one"
        else
            echo "Token valid, nothing to be done"
            exit 0
        fi
    fi

    echo "Deleting previous elasticsearch token for kibana"
    DELETE_TOKEN_CMD="curl -k --max-time 5 --silent --show-error -X DELETE -u $ES_AUTH $ES_URL"
    if [[ "$ES_CA" != "" ]]; then
        DELETE_TOKEN_CMD="${DELETE_TOKEN_CMD} --cacert ${ES_CA}"
    fi
    DELETE_TOKEN=$($DELETE_TOKEN_CMD)
    echo $DELETE_TOKEN;

    echo "Creating elasticsearch token for kibana"
    CREATE_TOKEN_CMD="curl -k --max-time 5 --silent --show-error -X POST -u $ES_AUTH $ES_URL"
    if [[ "$ES_CA" != "" ]]; then
        CREATE_TOKEN_CMD="${CREATE_TOKEN_CMD} --cacert ${ES_CA}"
    fi
    CREATE_TOKEN=$($CREATE_TOKEN_CMD)

    echo "Updating kubernetes secret token"
    TOKEN=$(echo $CREATE_TOKEN | sed -n 's/.*"value":"\([^"]*\)".*/\1/p');
    BASE64_TOKEN=$(echo $TOKEN | base64 -w 0);
    K8S_SECRET=$(cat <<EOF
    {
        "metadata": {
            "name": "$K8S_SECRET_NAME"
        },
        "data": {
            "token": "${BASE64_TOKEN}"
        }
    }
    EOF
    )
    secrets_response=$(curl -k --max-time 5 --silent --show-error \
        -X PUT \
        --cacert "$K8S_CA" \
        -H "Authorization: Bearer $K8S_BEARER" \
        -H "Accept: application/json" \
        -H "Content-Type: application/json" \
        "$K8S_URL/api/v1/namespaces/$K8S_NAMESPACE/secrets/$K8S_SECRET_NAME" \
        -d "$K8S_SECRET" \
    )

    echo "Restarting kibana deployments"
    K8S_DEPLOYMENT=$(cat <<EOF
    {
        "spec": {
            "template": {
                "metadata": {
                    "annotations": {
                        "kubectl.kubernetes.io/restartedAt": "$(date --utc +%FT%T.%3NZ)"
                    }
                }
            }
        }
    }
    EOF
    )
    patch_response=$(curl -k --max-time 5 --silent --show-error \
        -X PATCH \
        --cacert "$K8S_CA" \
        -H "Authorization: Bearer $K8S_BEARER" \
        -H "Accept: application/json" \
        -H "Content-Type: application/strategic-merge-patch+json" \
        "$K8S_URL/apis/apps/v1/namespaces/$K8S_NAMESPACE/deployments/$K8S_DEPLOYMENT_NAME?gracePeriodSeconds=0" \
        -d "$K8S_DEPLOYMENT" \
    )
    echo $patch_response
