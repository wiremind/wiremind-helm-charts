image:
  repository: apache/druid
  tag: ""
  pullPolicy: IfNotPresent

metrics:
  enabled: false
  service:
    port: 9876
  podMonitor:
    enabled: true

extensions:
  loadList:
    - druid-basic-security
    - druid-bloom-filter
    - druid-datasketches
    - druid-histogram
    - druid-kinesis-indexing-service
    - druid-lookups-cached-global
    - druid-lookups-cached-single
    - druid-pac4j
    - druid-parquet-extensions
    - druid-s3-extensions
    - druid-stats
    - postgresql-metadata-storage
    - prometheus-emitter

secretEnvVars: {}

configMap:
  enabled: true

configVars:
  ## DRUID env vars. ref: https://github.com/apache/druid/blob/master/distribution/docker/druid.sh#L29
  DRUID_LOG4J: |
    <?xml version="1.0" encoding="UTF-8" ?>
    <Configuration status="WARN">
      <Appenders>
        <Console name="Console" target="SYSTEM_OUT">
          <PatternLayout pattern="%d{ISO8601} %p [%t] %c -%notEmpty{ [%markerSimpleName]} %m%n"/>
        </Console>
      </Appenders>

      <Loggers>
        <Root level="info">
          <AppenderRef ref="Console"/>
        </Root>

        <!-- Set level="debug" to see stack traces for query errors -->
        <Logger name="org.apache.druid.server.QueryResource" level="info" additivity="false">
          <Appender-ref ref="Console"/>
        </Logger>
        <Logger name="org.apache.druid.server.QueryLifecycle" level="info" additivity="false">
          <Appender-ref ref="Console"/>
        </Logger>

        <!-- Set level="debug" or "trace" to see more Coordinator details (segment balancing, load/drop rules, etc) -->
        <Logger name="org.apache.druid.server.coordinator" level="info" additivity="false">
          <Appender-ref ref="Console"/>
        </Logger>

        <!-- Set level="debug" to see low-level details about segments and ingestion -->
        <Logger name="org.apache.druid.segment" level="info" additivity="false">
          <Appender-ref ref="Console"/>
        </Logger>

        <!-- Set level="debug" to see more information about extension initialization -->
        <Logger name="org.apache.druid.initialization" level="info" additivity="false">
          <Appender-ref ref="Console"/>
        </Logger>

        <!-- Quieter logging at startup -->
        <Logger name="org.skife.config" level="warn" additivity="false">
          <Appender-ref ref="Console"/>
        </Logger>
        <Logger name="com.sun.jersey.guice" level="warn" additivity="false">
          <Appender-ref ref="Console"/>
        </Logger>
      </Loggers>
    </Configuration>

  # Monitoring
  # See https://druid.apache.org/docs/latest/development/extensions-contrib/prometheus.html to configure
  # TODO: Use pushgateway for indexers (avoid losing scale_interval amount of metrics + they may )
  # https://druid.apache.org/docs/latest/configuration/index.html#emitting-metrics
  druid_emitter: noop
  druid_emitter_logging_logLevel: debug

  # Storage
  # https://druid.apache.org/docs/latest/configuration/index.html#common-configurations
  druid_storage_type: local
  druid_indexer_logs_type: file
  druid_indexer_logs_directory: /opt/data/indexing-logs

router:
  enabled: true
  replicaCount: 1
  name: router
  port: 8888
  servicePort: 80
  serviceType: ClusterIP
  livenessProbe:
    enabled: true
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 15
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 5
    successThreshold: 1
  ingress:
    enabled: false
    annotations:
      nginx.ingress.kubernetes.io/auth-realm: Authentication Required
      nginx.ingress.kubernetes.io/auth-secret: basic-auth
      nginx.ingress.kubernetes.io/auth-type: basic
      kubernetes.io/tls-acme: "false"
    path: /
  resources: {}
  priorityClassName: ""
  nodeSelector: {}
  tolerations: []
  affinity: {}
  annotations: {}
  podAnnotations: {}
  podDisruptionBudget: {}
  envVars:
    druid_router_managementProxy_enabled: "true"
  secretEnvVars: {}

broker:
  enabled: true
  replicaCount: 1
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 2
    averageCpuUtilization: 80
  name: broker
  port: 8082
  serviceType: ClusterIP
  livenessProbe:
    enabled: true
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 15
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 5
    successThreshold: 1
  ingress:
    enabled: false
    annotations: {}
    path: /
    tls: []
  terminationGracePeriodSeconds: 10
  resources: {}
  priorityClassName: ""
  nodeSelector: {}
  tolerations: []
  affinity: {}
  annotations: {}
  podAnnotations: {}
  podDisruptionBudget: {}
  envVars: {}
  secretEnvVars: {}
  defaults:
    updateStrategy:
      type: RollingUpdate

coordinator:
  enabled: true
  replicaCount: 1
  name: coordinator
  port: 8081
  serviceType: ClusterIP
  ingress:
    enabled: false
    annotations: {}
    path: /
    tls: []
  livenessProbe:
    enabled: true
    initialDelaySeconds: 60
    periodSeconds: 15
    timeoutSeconds: 60
    failureThreshold: 15
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 60
    periodSeconds: 15
    timeoutSeconds: 60
    failureThreshold: 5
    successThreshold: 1
  resources: {}
  priorityClassName: ""
  nodeSelector: {}
  tolerations: []
  affinity: {}
  annotations: {}
  podAnnotations: {}
  podDisruptionBudget: {}
  envVars: {}
  secretEnvVars: {}

historical:
  enabled: true
  defaults:
    replicaCount: 1
    podManagementPolicy: Parallel
    envVars:
      # Processing
      # 50Mo
      druid_processing_buffer_sizeBytes: '50000000'
      druid_processing_numMergeBuffers: "2"
      druid_processing_numThreads: "1"
    secretEnvVars: {}
    persistence:
      enabled: true
    priorityClassName: ""
    affinity: {}
    nodeSelector: {}
    tolerations: []
    resources: {}
    updateStrategy:
      type: RollingUpdate
    # Startup may be slow if a lot of segments.
    startupProbe:
      enabled: true
      initialDelaySeconds: 60
      periodSeconds: 60
      timeoutSeconds: 10
      failureThreshold: 400
      successThreshold: 1
    livenessProbe:
      enabled: true
      initialDelaySeconds: 60
      periodSeconds: 10
      timeoutSeconds: 10
      failureThreshold: 15
      successThreshold: 1
    readinessProbe:
      enabled: true
      initialDelaySeconds: 60
      periodSeconds: 10
      timeoutSeconds: 10
      failureThreshold: 10
      successThreshold: 1
  tiers:
    default:
      envVars:
        DRUID_XMX: 256m
        DRUID_XMS: 256m
        DRUID_MAXDIRECTMEMORYSIZE: 400m

        druid_server_tier: "tier_default"
        druid_segmentCache_locations: '[{"path":"var/druid/segment-cache","maxSize":"1GiB"}]'
      resources:
        requests:
          memory: 256Mi
          cpu: 50m
      persistence:
        size: 2Gi

indexer:
  enabled: true
  defaults:
    replicaCount: 1
    podManagementPolicy: Parallel
    priorityClassName: ""
    livenessProbe:
      enabled: true
      initialDelaySeconds: 60
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 15
      successThreshold: 1
    readinessProbe:
      enabled: true
      initialDelaySeconds: 60
      periodSeconds: 10
      timeoutSeconds: 1
      failureThreshold: 5
      successThreshold: 1
    affinity: {}
    nodeSelector: {}
    tolerations: []
    resources: {}
    envVars: {}
    secretEnvVars: {}
  categories:
    default:
      mode: "Deployment"
      envVars:
        DRUID_XMX: 256m
        DRUID_XMS: 256m
        druid_worker_capacity: "1"
        druid_worker_category: "default"
      resources:
        requests:
          memory: 256Mi
          cpu: 50m
      emptyDir:
        size: 1Gi
      autoscaling:
        enabled: false

# If using a zookeeper installed outside of this chart you must uncomment and set this line
# zkHosts: "druid-zookeeper-headless:2181"
zkHosts: ""

zookeeper:
  enabled: true
  image:
    debug: true
  podAnnotations: {}

gCloudStorage:
  enabled: false
  secretName: google-cloud-key

mysql:
  enabled: false
  auth:
    rootPassword: mysql
    username: druid
    password: druid
    database: druid

postgresql:
  enabled: true
  auth:
    postgresPassword: postgres
    username: druid
    password: druid
    database: druid
  backup:
    s3:
      enabled: false
      cronJob:
        name: druid-postgresql-backup
        imagePullSecrets: []
        schedule: "0 12 * * *"
        startingDeadlineSeconds: 600
        concurrencyPolicy: "Forbid"
        failedJobsHistoryLimit: 1
        successfulJobsHistoryLimit: 1
        resources: {}
        priorityClassName: ""
      awsConfig:
        accessKeyId: ""
        secretAccessKey: ""
        bucketName: druid-postgresql-backup
        retention: "15 days"
        region: us-west-1

kube-hpa-scale-to-zero:
  enabled: false
  # args: ["--hpa-namespace", "{{ .Release.Namespace }}"]
  args: ["--hpa-namespace", "foo"]
  resources:
    requests:
      memory: 100Mi
      cpu: 10m

configJobs:
  enabled: true
  priorityClassName: ""
  affinity: {}
  tolerations: []
  changeComment: ""
  dict:
    overlord-dyn-cfg:
      component:
        scheme: http
        name: coordinator
        port: 8081
        route: "/druid/indexer/v1/worker"
      payload:
        selectStrategy:
          type: "equalDistributionWithCategorySpec"
          workerCategorySpec:
            strong: true
            categoryMap:
              index_parallel:
                defaultCategory: "default"
              index:
                defaultCategory: "default"
              single_phase_sub_task:
                defaultCategory: "default"
              kill:
                defaultCategory: "default"
              compact:
                defaultCategory: "default"

extra-objects:
  enabled: false
