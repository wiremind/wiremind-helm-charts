# Default values for druid.

image:
  repository: apache/druid
  tag: 0.21.1
  pullPolicy: IfNotPresent

extensions:
  loadList:
    - druid-basic-security
    - druid-bloom-filter
    - druid-datasketches
    - druid-histogram
    - druid-kinesis-indexing-service
    - druid-lookups-cached-global
    - druid-lookups-cached-single
    - druid-pac4j
    - druid-parquet-extensions
    - druid-s3-extensions
    - druid-stats
    - postgresql-metadata-storage

# Will be put into a ConfigMap whose content will be injected to all druid components as env vars
envVars: {}
  # Zookeeper
  # druid_zk_service_host: "{{ .Values.releaseName }}-zookeeper:2181"

# Will be put into a Secret whose content will be injected to all druid components as env vars
secretEnvVars: {}

# Dispatch queries on druid services
router:
  replicaCount: 1
  name: router
  port: 8888
  servicePort: 80
  serviceType: ClusterIP
  ingress:
    enabled: false
    path: /
  resources: {}
  priorityClassName: ""
  nodeSelector: {}
  tolerations: []
  affinity: {}
  annotations: {}
  podAnnotations: {}
  podDisruptionBudget: {}
  envVars:
    druid_router_managementProxy_enabled: "true"
  secretEnvVars: {}

# Merge results, build plan and execute SQL queries
broker:
  replicaCount: 1
  name: broker
  port: 8082
  serviceType: ClusterIP
  ingress:
    enabled: false
    annotations: {}
    path: /
    tls: []
  resources: {}
  priorityClassName: ""
  nodeSelector: {}
  tolerations: []
  affinity: {}
  annotations: {}
  podAnnotations: {}
  podDisruptionBudget: {}
  envVars: {}
  secretEnvVars: {}

# Coordinator + overlord assign segements, check health
coordinator:
  replicaCount: 1
  name: coordinator
  port: 8081
  serviceType: ClusterIP
  ingress:
    enabled: false
    annotations: {}
    path: /
    tls: []
  resources: {}
  priorityClassName: ""
  nodeSelector: {}
  tolerations: []
  affinity: {}
  annotations: {}
  podAnnotations: {}
  podDisruptionBudget: {}
  envVars: {}
  secretEnvVars: {}

# Historical nodes store data on SSD, in-memory if possible
historical:
  defaults:
    replicaCount: 1
    podManagementPolicy: Parallel
    persistence:
      enabled: true
      accessMode: ReadWriteOnce
    priorityClassName: ""
    affinity: {}
    nodeSelector: {}
    tolerations: []
    resources: {}
    updateStrategy:
      type: RollingUpdate
  tiers: {}
  #  tierName:
  #    envVars: {}
  #   secretEnvVars: {}

# Ingest data, both real-time or batch tasks
indexer:
  defaults:
    replicaCount: 1
    podManagementPolicy: Parallel
    priorityClassName: ""
    affinity: {}
    nodeSelector: {}
    tolerations: []
    resources: {}
    envVars: {}
    secretEnvVars: {}
  categories: {}
  #  categoryName1:
  #    mode: StatefulSet
  #    updateStrategy:
  #      type: RollingUpdate
  #  categoryName2:
  #    mode: Deployment
  #    replicaCount: 2
  #    ingress:
  #      enabled: false
  #      annotations: {}
  #      path: /
  #      tls: []
  #    emptyDir:
  #      size: 1Gi
  #    autoscaling:
  #      enabled: false
  #    podDisruptionBudget: xxx
  #    envVars: {}
  #    secretEnvVars: {}

# Leader election, pusblishing protocols, task management
zookeeper:
  enabled: true
  image:
    debug: true
  replicaCount: 3
  listenOnAllIPs: true
  podAnnotations: {}

# Store metadata (what a shame)
postgresql:
  enabled: false
  backup:
    s3:
      enabled: false

# Druid doesn't support streaming updates very well, PG will do that for it (We will preserve PG dignity)
buffer-postgresql:
  enabled: false
  podAnnotations: {}

# Export metrics from Druid to Prometheus.
monitoring:
  enabled: false
  name: opstree-exporter
  image:
    repository: quay.io/opstree/druid-exporter
    tag: v0.9
    # They don't ensure immutable tags
    pullPolicy: Always
  serviceMonitor:
    enabled: false
  resources: {}
  port: 8080
  priorityClassName: ""
  annotations: {}
  podAnnotations: {}

# downscaler, see https://github.com/hjacobs/kube-downscaler
downscaler:
  enabled: false
  name: downscaler
  image:
    repository: hjacobs/kube-downscaler
    tag: 20.5.0
    pullPolicy: IfNotPresent
  resources: {}
  priorityClassName: ""
  nodeAffinity: {}
  nodeSelector: {}
  tolerations: []
  annotations: {}
  podAnnotations: {}

# Used for storing data to be ingested by druid, for deep storage and to store tasks logs (yes 3 times store s3)
minio-s3:
  enabled: false
  podAnnotations: {}
