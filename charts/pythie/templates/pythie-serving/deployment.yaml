{{- range $servingHash, $servingValue := .Values.pythieServing.models }}

{{- $servingValueImage := default (dict) $servingValue.image }}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: model-{{ $servingHash }}
  labels:
    {{- include "pythie.labels" $ | nindent 4 }}
    {{- include "pythie.modelLabels" $servingValue | nindent 4 }}
    serving/hash: {{ $servingHash }}
spec:
  {{- with $servingValue.replicaCount }}
  replicas: {{ . }}
  {{- end }}
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      {{- include "pythie.matchLabels" $ | nindent 6 }}
      serving/hash: {{ $servingHash }}
  template:
    metadata:
      labels:
        {{- include "pythie.labels" $ | nindent 8 }}
        {{- include "pythie.modelLabels" $servingValue | nindent 8 }}
        serving-kind: pythie
        serving/hash: {{ $servingHash }}
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        checksum/configmap: {{ include (print $.Template.BasePath "/pythie-serving/configmap.yaml") $ | sha256sum | quote }}
        {{- if $.Values.pythieServing.istio.enabled }}
        sidecar.istio.io/inject: 'true'
        {{- end }}
        # Adding the etags of the S3 buckets containing the models so the pods restart when a model does.
        # This may lead the pod to restart while upgrading the release if the order of the models changes inside a serving in values.yaml
        {{- range $index, $model := $servingValue.models }}
        etag-{{ $index }}: {{ $model.etag | quote }}
        {{- end }}
        {{- with $servingValue.version }}
        checksum/version: {{ . | quote }}
        {{- end }}
    spec:
      {{- if $.Values.priorityClassName }}
      priorityClassName: {{ $.Values.priorityClassName }}
      {{- end }}
      {{- if $.Values.pythieServing.pullSecret }}
      imagePullSecrets:
        - name: {{ $.Values.pythieServing.pullSecret }}
      {{- end }}
      initContainers:
        - name: model-download
          image: {{ $.Values.mc.image.repository }}:{{ $.Values.mc.image.tag }}
          imagePullPolicy: {{ $.Values.mc.image.pullPolicy | quote }}
          command:
            - /bin/sh
          args:
            - -c
            - |
              {{- include "pythie.untar" $servingValue | nindent 14 }}
          envFrom:
            - secretRef:
                name: {{ include "pythie.fullname" $ }}-s3
          resources: {{- toYaml $servingValue.resources | nindent 12 }}
          volumeMounts:
            - name: model-volume
              mountPath: /mnt/models
          securityContext:
            capabilities:
              drop:
                - all
      containers:
        - name: pythie-serving
          image: {{ $.Values.pythieServing.image.repository }}:{{ $servingValueImage.tag | default $.Values.pythieServing.image.tag }}
          imagePullPolicy: {{ $.Values.pythieServing.image.pullPolicy | quote }}
          args:
            - --port=9090
            - --worker-count={{ $servingValue.workerCount }}
            - --maximum-concurrent-rpcs={{ $servingValue.maximumConcurrentRpcs }}
            - /etc/tensorflow/models.config
          ports:
            - containerPort: 9090
              protocol: TCP
              name: grpc
            {{- if $.Values.pythieServing.customPorts }}
            {{- toYaml $.Values.pythieServing.customPorts | nindent 12 }}
            {{- end }}
          resources: {{- toYaml $servingValue.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /mnt/models
              name: model-volume
            - mountPath: /etc/tensorflow
              name: model-config
          securityContext:
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - all
              add:
                - NET_BIND_SERVICE
            runAsNonRoot: true
            runAsUser: 10001
            runAsGroup: 10001
          env:
            - name: "TREELITE_BIND_THREADS"
              value: "0"
            - name: "TREELITE_NTHREAD"
              value: "1"
            {{- if $servingValue.grpcServerTimeoutSeconds }}
            - name: "GRPC_SERVER_TIMEOUT"
              value: {{ $servingValue.grpcServerTimeoutSeconds }}
            {{- end }}
            - name: "VERBOSITY_LEVEL"
              value: {{ $.Values.pythieServing.verbosityLevel | quote }}
            {{- if $.Values.pythieServing.opentelemetryCollectorHost }}
            - name: "OPENTELEMETRY_COLLECTOR_HOST"
              value: {{ $.Values.pythieServing.opentelemetryCollectorHost }}
            {{- end }}
      {{- with $.Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 5
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  {{- include "pythie.labels" $ | nindent 18 }}
                  {{- include "pythie.modelLabels" $servingValue | nindent 18 }}
                  serving/hash: {{ $servingHash }}
        {{- with $.Values.affinity }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      volumes:
        - name: model-volume
          emptyDir: {}
        - name: model-config
          configMap:
            name: model-{{ $servingHash }}

{{- end }}
